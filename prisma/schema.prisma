// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  role           String    @default("user")
  phone          String?
  business_name  String?
  profile_picture String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  
  accounts       Account[]
  sessions       Session[]
  settings       UserSettings?
  business_info  BusinessInfo?
  tax_settings   TaxSettings?
  categories     Category[]
  budgets        Budget[]
  transactions   Transaction[]
  feedback       Feedback[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  notification_preferences Json     @default("{}")
  theme                   String   @default("light")
  language                String   @default("en")
  currency                String   @default("USD")
  date_format             String   @default("MM/DD/YYYY")
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BusinessInfo {
  id             String   @id @default(cuid())
  userId         String   @unique
  business_name  String?
  business_type  String?
  address        String?
  city           String?
  state          String?
  zip            String?
  country        String?
  phone          String?
  email          String?
  website        String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TaxSettings {
  id               String   @id @default(cuid())
  userId           String   @unique
  tax_id           String?
  default_tax_rate Decimal  @default(0) @db.Decimal(5, 2)
  tax_method       String   @default("exclusive")
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tax_rates        TaxRate[]
}

model TaxRate {
  id         String   @id @default(cuid())
  tax_settings_id String
  name       String
  rate       Decimal  @db.Decimal(5, 2)
  region     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  tax_settings TaxSettings @relation(fields: [tax_settings_id], references: [id], onDelete: Cascade)
}

model Category {
  id         String   @id @default(cuid())
  userId     String
  name       String
  type       String   // 'income' or 'expense'
  color      String?
  icon       String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  budgets    Budget[]
  transactions Transaction[]
}

model Budget {
  id          String   @id @default(cuid())
  userId      String
  categoryId  String
  amount      Decimal  @db.Decimal(12, 2)
  period      String   @default("monthly") // 'monthly', 'yearly', etc.
  start_date  DateTime
  end_date    DateTime?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  categoryId  String?
  amount      Decimal  @db.Decimal(12, 2)
  type        String   // 'income' or 'expense'
  description String?
  date        DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model Feedback {
  id           String   @id @default(cuid())
  userId       String
  feedback_type String
  content      String
  status       String   @default("pending")
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

